Action table loading...
Action table loaded:
------------------------------------------------------------
State	$	(	)	*	+	id
0	-	s4	-	-	-	s5
1	accept	-	-	-	s6	-
2	r2	-	r2	s7	r2	-
3	r4	-	r4	r4	r4	-
4	-	s4	-	-	-	s5
5	r6	-	r6	r6	r6	-
6	-	s4	-	-	-	s5
7	-	s4	-	-	-	s5
8	-	-	s11	-	s6	-
9	r1	-	r1	s7	r1	-
10	r3	-	r3	r3	r3	-
11	r5	-	r5	r5	r5	-
------------------------------------------------------------

GOTO table loading...
GOTO table loaded:
----------------------------------------
State	E	F	T
0	1	3	2
1	-	-	-
2	-	-	-
3	-	-	-
4	8	3	2
5	-	-	-
6	-	3	9
7	-	10	-
8	-	-	-
9	-	-	-
10	-	-	-
11	-	-	-
----------------------------------------

Grammar rules loading...
Grammar rules loaded:
--------------------------------------------------
Rule 1: E -> E + T (RHS token count: 3)
Rule 2: E -> T (RHS token count: 1)
Rule 3: T -> T * F (RHS token count: 3)
Rule 4: T -> F (RHS token count: 1)
Rule 5: F -> ( E ) (RHS token count: 3)
Rule 6: F -> id (RHS token count: 1)
--------------------------------------------------


Parsing started for the input: id * ( id + id ) $

Current stack content 0
Current state (stack-top) is 0, next token is 'id'
Fetched action from the table: s5

Shift and goto state 5: push the token "id" and state 5 onto the stack
Parse tree: token "id" becomes a node (leaf)
Move to next token
--------------------------------------------------------------------------------
Current stack content 0id5
Current state (stack-top) is 5, next token is '*'
Fetched action from the table: r6

Reduce using grammar rule 6: F -> id
Stack content before reduce: 0id5
Pop 1 symbols and their states (2 items) from the stack based on RHS of rule 6: [id]
State revealed after pop: 0 (current stack content: 0)
Push LHS (F) of grammar rule 6 onto stack
Push new state from GOTO table onto stack: 3 (GOTO[0, F])
Parse tree: grammar rule's LHS (F) becomes a node (parent) and popped tokens/non-terminals become its children
Stack content after reduce: 0F3
--------------------------------------------------------------------------------
Current stack content 0F3
Current state (stack-top) is 3, next token is '*'
Fetched action from the table: r4

Reduce using grammar rule 4: T -> F
Stack content before reduce: 0F3
Pop 1 symbols and their states (2 items) from the stack based on RHS of rule 4: [F]
State revealed after pop: 0 (current stack content: 0)
Push LHS (T) of grammar rule 4 onto stack
Push new state from GOTO table onto stack: 2 (GOTO[0, T])
Parse tree: grammar rule's LHS (T) becomes a node (parent) and popped tokens/non-terminals become its children
Stack content after reduce: 0T2
--------------------------------------------------------------------------------
Current stack content 0T2
Current state (stack-top) is 2, next token is '*'
Fetched action from the table: s7

Shift and goto state 7: push the token "*" and state 7 onto the stack
Parse tree: token "*" becomes a node (leaf)
Move to next token
--------------------------------------------------------------------------------
Current stack content 0T2*7
Current state (stack-top) is 7, next token is '('
Fetched action from the table: s4

Shift and goto state 4: push the token "(" and state 4 onto the stack
Parse tree: token "(" becomes a node (leaf)
Move to next token
--------------------------------------------------------------------------------
Current stack content 0T2*7(4
Current state (stack-top) is 4, next token is 'id'
Fetched action from the table: s5

Shift and goto state 5: push the token "id" and state 5 onto the stack
Parse tree: token "id" becomes a node (leaf)
Move to next token
--------------------------------------------------------------------------------
Current stack content 0T2*7(4id5
Current state (stack-top) is 5, next token is '+'
Fetched action from the table: r6

Reduce using grammar rule 6: F -> id
Stack content before reduce: 0T2*7(4id5
Pop 1 symbols and their states (2 items) from the stack based on RHS of rule 6: [id]
State revealed after pop: 4 (current stack content: 0T2*7(4)
Push LHS (F) of grammar rule 6 onto stack
Push new state from GOTO table onto stack: 3 (GOTO[4, F])
Parse tree: grammar rule's LHS (F) becomes a node (parent) and popped tokens/non-terminals become its children
Stack content after reduce: 0T2*7(4F3
--------------------------------------------------------------------------------
Current stack content 0T2*7(4F3
Current state (stack-top) is 3, next token is '+'
Fetched action from the table: r4

Reduce using grammar rule 4: T -> F
Stack content before reduce: 0T2*7(4F3
Pop 1 symbols and their states (2 items) from the stack based on RHS of rule 4: [F]
State revealed after pop: 4 (current stack content: 0T2*7(4)
Push LHS (T) of grammar rule 4 onto stack
Push new state from GOTO table onto stack: 2 (GOTO[4, T])
Parse tree: grammar rule's LHS (T) becomes a node (parent) and popped tokens/non-terminals become its children
Stack content after reduce: 0T2*7(4T2
--------------------------------------------------------------------------------
Current stack content 0T2*7(4T2
Current state (stack-top) is 2, next token is '+'
Fetched action from the table: r2

Reduce using grammar rule 2: E -> T
Stack content before reduce: 0T2*7(4T2
Pop 1 symbols and their states (2 items) from the stack based on RHS of rule 2: [T]
State revealed after pop: 4 (current stack content: 0T2*7(4)
Push LHS (E) of grammar rule 2 onto stack
Push new state from GOTO table onto stack: 8 (GOTO[4, E])
Parse tree: grammar rule's LHS (E) becomes a node (parent) and popped tokens/non-terminals become its children
Stack content after reduce: 0T2*7(4E8
--------------------------------------------------------------------------------
Current stack content 0T2*7(4E8
Current state (stack-top) is 8, next token is '+'
Fetched action from the table: s6

Shift and goto state 6: push the token "+" and state 6 onto the stack
Parse tree: token "+" becomes a node (leaf)
Move to next token
--------------------------------------------------------------------------------
Current stack content 0T2*7(4E8+6
Current state (stack-top) is 6, next token is 'id'
Fetched action from the table: s5

Shift and goto state 5: push the token "id" and state 5 onto the stack
Parse tree: token "id" becomes a node (leaf)
Move to next token
--------------------------------------------------------------------------------
Current stack content 0T2*7(4E8+6id5
Current state (stack-top) is 5, next token is ')'
Fetched action from the table: r6

Reduce using grammar rule 6: F -> id
Stack content before reduce: 0T2*7(4E8+6id5
Pop 1 symbols and their states (2 items) from the stack based on RHS of rule 6: [id]
State revealed after pop: 6 (current stack content: 0T2*7(4E8+6)
Push LHS (F) of grammar rule 6 onto stack
Push new state from GOTO table onto stack: 3 (GOTO[6, F])
Parse tree: grammar rule's LHS (F) becomes a node (parent) and popped tokens/non-terminals become its children
Stack content after reduce: 0T2*7(4E8+6F3
--------------------------------------------------------------------------------
Current stack content 0T2*7(4E8+6F3
Current state (stack-top) is 3, next token is ')'
Fetched action from the table: r4

Reduce using grammar rule 4: T -> F
Stack content before reduce: 0T2*7(4E8+6F3
Pop 1 symbols and their states (2 items) from the stack based on RHS of rule 4: [F]
State revealed after pop: 6 (current stack content: 0T2*7(4E8+6)
Push LHS (T) of grammar rule 4 onto stack
Push new state from GOTO table onto stack: 9 (GOTO[6, T])
Parse tree: grammar rule's LHS (T) becomes a node (parent) and popped tokens/non-terminals become its children
Stack content after reduce: 0T2*7(4E8+6T9
--------------------------------------------------------------------------------
Current stack content 0T2*7(4E8+6T9
Current state (stack-top) is 9, next token is ')'
Fetched action from the table: r1

Reduce using grammar rule 1: E -> E + T
Stack content before reduce: 0T2*7(4E8+6T9
Pop 3 symbols and their states (6 items) from the stack based on RHS of rule 1: [E, +, T]
State revealed after pop: 4 (current stack content: 0T2*7(4)
Push LHS (E) of grammar rule 1 onto stack
Push new state from GOTO table onto stack: 8 (GOTO[4, E])
Parse tree: grammar rule's LHS (E) becomes a node (parent) and popped tokens/non-terminals become its children
Stack content after reduce: 0T2*7(4E8
--------------------------------------------------------------------------------
Current stack content 0T2*7(4E8
Current state (stack-top) is 8, next token is ')'
Fetched action from the table: s11

Shift and goto state 11: push the token ")" and state 11 onto the stack
Parse tree: token ")" becomes a node (leaf)
Move to next token
--------------------------------------------------------------------------------
Current stack content 0T2*7(4E8)11
Current state (stack-top) is 11, next token is '$'
Fetched action from the table: r5

Reduce using grammar rule 5: F -> ( E )
Stack content before reduce: 0T2*7(4E8)11
Pop 3 symbols and their states (6 items) from the stack based on RHS of rule 5: [(, E, )]
State revealed after pop: 7 (current stack content: 0T2*7)
Push LHS (F) of grammar rule 5 onto stack
Push new state from GOTO table onto stack: 10 (GOTO[7, F])
Parse tree: grammar rule's LHS (F) becomes a node (parent) and popped tokens/non-terminals become its children
Stack content after reduce: 0T2*7F10
--------------------------------------------------------------------------------
Current stack content 0T2*7F10
Current state (stack-top) is 10, next token is '$'
Fetched action from the table: r3

Reduce using grammar rule 3: T -> T * F
Stack content before reduce: 0T2*7F10
Pop 3 symbols and their states (6 items) from the stack based on RHS of rule 3: [T, *, F]
State revealed after pop: 0 (current stack content: 0)
Push LHS (T) of grammar rule 3 onto stack
Push new state from GOTO table onto stack: 2 (GOTO[0, T])
Parse tree: grammar rule's LHS (T) becomes a node (parent) and popped tokens/non-terminals become its children
Stack content after reduce: 0T2
--------------------------------------------------------------------------------
Current stack content 0T2
Current state (stack-top) is 2, next token is '$'
Fetched action from the table: r2

Reduce using grammar rule 2: E -> T
Stack content before reduce: 0T2
Pop 1 symbols and their states (2 items) from the stack based on RHS of rule 2: [T]
State revealed after pop: 0 (current stack content: 0)
Push LHS (E) of grammar rule 2 onto stack
Push new state from GOTO table onto stack: 1 (GOTO[0, E])
Parse tree: grammar rule's LHS (E) becomes a node (parent) and popped tokens/non-terminals become its children
Stack content after reduce: 0E1
--------------------------------------------------------------------------------
Current stack content 0E1
Current state (stack-top) is 1, next token is '$'
Fetched action from the table: accept

ACCEPTED
--------------------------------------------------------------------------------

Parse tree:
/E
/E/T
/E/T/T
/E/T/T/F
/E/T/T/F/id
/E/T/*
/E/T/F
/E/T/F/(
/E/T/F/E
/E/T/F/E/E
/E/T/F/E/E/T
/E/T/F/E/E/T/F
/E/T/F/E/E/T/F/id
/E/T/F/E/+
/E/T/F/E/T
/E/T/F/E/T/F
/E/T/F/E/T/F/id
/E/T/F/)
